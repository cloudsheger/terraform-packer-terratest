@Library('jenkins-devops-libs@master')_

pipeline {
    agent any

    environment {
        ARTIFACTORY_CREDENTIALS_ID = 'jfrog-cred.hadid'
    }

    parameters {

        string(name: 'ProjectKey', defaultValue: 'shared-lib', description: 'SonarQube project key')
        string(name: 'ProjectName', defaultValue: 'shared-lib', description: 'SonarQube project name')
        string(name: 'SonarHostUrl', defaultValue: 'http://localhost:9000', description: 'SonarQube server URL')
        string(name: 'GIT_REPO', defaultValue: 'https://github.com/cloudsheger/terraform-packer-terratest.git', description: 'GitHub repo')
        string(name: 'GIT_BRANCH', defaultValue: 'master', description: 'GitHub branch name')

        string(name: 'dockerRegistry', defaultValue: 'hadid.jfrog.io', description: 'Artifactory Docker registry URL')
        string(name: 'dockerRegistry_url', defaultValue: 'https://hadid.jfrog.io', description: 'Artifactory Docker registry URL')
        string(name: 'dockerRepo', defaultValue: 'docker', description: 'Artifactory Docker repository name')
        string(name: 'imageName', defaultValue: 'ami-builder', description: 'Docker image name')
        string(name: 'BUILD_NUMBER', defaultValue: env.BUILD_NUMBER, description: 'Build number')
    }

    stages {
        stage('Checkout SCM') {
            steps {
                git branch: params.GIT_BRANCH, url: params.GIT_REPO
            }
        }

        /*stage('SonarQube Code Analysis') {
            steps {
                withCredentials([string(credentialsId: 'SONAR_TOKEN_ID', variable: 'sonar_token')]) {
                    sonarScanPipeline(
                        projectKey: params.ProjectKey,
                        projectName: params.ProjectName,
                        sonarHostUrl: params.SonarHostUrl,
                        sonarToken: "${sonar_token}"
                    )
                }
            }
        }*/

        stage('Build Docker Image') {
            steps {
             script {
                docker.dockerBuild(
                    DOCKER_REGISTRY: params.dockerRegistry,
                    DOCKER_REPO: params.dockerRepo,
                    IMAGE_NAME: params.imageName,
                    BUILD_NUMBER: params.BUILD_NUMBER
                )
             }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {

                    // Call the shared library function
                    docker.dockerPush([
                        DOCKER_REGISTRY: params.dockerRegistry,
                        DOCKER_REGISTRY_URL: params.dockerRegistry_url,
                        DOCKER_REPO: params.dockerRepo,
                        IMAGE_NAME: params.imageName,
                        BUILD_NUMBER: params.BUILD_NUMBER,
                        DOCKER_CREDS_ID: ARTIFACTORY_CREDENTIALS_ID
                    ])
                }
            }
        }

        stage('Cleanup Docker Image') {
            steps {
             script {
                cleanupDockerImage(
                    DOCKER_REGISTRY: params.dockerRegistry,
                    DOCKER_REPO: params.dockerRepo,
                    IMAGE_NAME:  params.imageName,
                    BUILD_NUMBER: params.BUILD_NUMBER
                )
             }
            }
        }
    }
}
